// <auto-generated />
using System;
using ClinicaAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicaAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220124153645_test1")]
    partial class test1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicaAPI.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.ClientInfo", b =>
                {
                    b.Property<int>("ClientInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientInfoId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientInformation");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.ClientOfferLocation", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "OfferId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OfferId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ReturnTime")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.ClientInfo", b =>
                {
                    b.HasOne("ClinicaAPI.Entities.Client", "Client")
                        .WithOne("Info")
                        .HasForeignKey("ClinicaAPI.Entities.ClientInfo", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.ClientOfferLocation", b =>
                {
                    b.HasOne("ClinicaAPI.Entities.Client", "Client")
                        .WithMany("ClientOfferLocation")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaAPI.Entities.Location", "Location")
                        .WithMany("ClientOfferLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaAPI.Entities.Offer", "Offer")
                        .WithMany("ClientOfferLocation")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Location");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Location", b =>
                {
                    b.HasOne("ClinicaAPI.Entities.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Client", b =>
                {
                    b.Navigation("ClientOfferLocation");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Location", b =>
                {
                    b.Navigation("ClientOfferLocation");
                });

            modelBuilder.Entity("ClinicaAPI.Entities.Offer", b =>
                {
                    b.Navigation("ClientOfferLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
